Sajana Wijesinghe
CS341 
Discussion Questions

1) Describe how you tested your code. Try the following experiments. 
Write several sentences about what you found or learned working on 
each, and on any other similar kinds of questions that occur to you. 

	Using the usyms file, I did md of xyz (Memory Address: 213d8) and 
	I get an output of 06 ...... because in the code we inilaized xyz as 6.

2) What happens if you call md for an address that does not correspond 
to a physical memory address? What if you write to an address that's part 
of your tutor code or an address in ROM area of memory? Do these questions 
have the same answers on UNIX and the SAPC?  

	When you call md on an address that does not correspond to a physical 
	memory address we get Exception 14 at EIP=00060d9e: Page fault on SAPC

	On the Unix, I get a segmentation fault (core dumped)

3) Read the makefile to see where it puts the symbol table (nm output) 
for your tutor code. Use that symbol table to figure out:  

a) the address for test global variable xyz, which has value 6. Use 
tutor with that address to verify the value in memory.

	Memory Address of xyz : 213d8
	Output was 06 00 00 00 00 02 13 d8 00 00 00 00 ff ff ff ff

b) the address of the pointer variable pxyz. This address should be close 
to the one you determined in a, but not equal to it, since pxyz is the next 
variable in memory after xyz. Find the value of pxyz in memory. This should 
be equal to the address you found in (a) because of the initialization of this 
variable to &xyz. Note that you need to get 4 bytes of data for the value here. 
See IMPORTANT NOTE just below. 

	Memory Address of pxyz : 213dc
	Output was 00 02 13 d8 00 00 00 00 ff ff ff ff 00 00 00 00

c) the address of the cmds array. Use this address to determine the very first 
pointer in the array, the string pointer to "md". Then find the 'm' and 'd' and 
terminating null of this string. 

	Memory Address of cmds : 2139c
	Output was 00 01 10 78 00 01 0d 6c 00 01 10 80 00 01 10 a0

d) change the stop command from 's' to 'x' while the tutor program is running. 
Can you change the tutor prompt the same way? 

	No you cannot change the tutor prompt while its running

4) Read the nm output to determine where in memory the code resides, on SAPC 
and UNIX. 
Hint: code symbols are marked t or T. Similarly determine where the data (set of variables) 
resides. 

	The code starts at memory address 0x00010664 and ends at 0x00011004 in Unix.
	The data is in the 0x00010000 address in the Unix 
	As for the SAPC, those files do not exist since we do not use the make command 

5) Try to change the code itself so that tutor crashes (any random change that actually 
takes effect should do this). What happens on SAPC? on UNIX? 

	On the Unix we get Segmentation Fault
	On the SAPC we get Exception 14

6) You can't find the program stack using the nm output, but you can find it by 
looking at the stack pointer, called ESP on the SAPC and sp on the SPARC (ulab's CPU). 
Record your observations. Use "i reg" (info on registers) to see sp in gdb and "rd" 
to see registers in Tutor. 

	On the Tutor I get:

		EAX=00000000 EBX=00000000 EBP=00000000
		EDX=00101e90 ECX=00101eb4 ESP=003ffff0
		ESI=00013e10 EDI=0010206c EIP=00100110
		EFLAGS=0246 (IF=1 SF=0 ZF=1 CF=0 OF=0)

7) What other interesting things have you tried? 

	All I did was md severals inputs and changed their memeory address using ms 

8) More questions you should consider answering. What did you learn from this project? 
Was it worth the time it took? What parts were the hardest, what parts the easiest, 
what parts most surprising, most interesting? What idiosyncrasies of C or UNIX or the 
SAPC or our installation slowed you down or helped you out? How might the assignment be 
improved? 

	This project made me learn about pointers. The hardest part was the fact that I had 
	to relearn everything about pointers. And another mistake I made was that I tried to 
	make the tutor file in the Unix instead of the ulabs 
